[gd_scene load_steps=5 format=3 uid="uid://ivo77piqgdfv"]

[ext_resource type="PackedScene" uid="uid://bi6uykfg167sj" path="res://source/player/car.tscn" id="1_ldj6h"]
[ext_resource type="Texture2D" uid="uid://dehg38xt8tidn" path="res://resource/image/car.png" id="2_mhcvl"]

[sub_resource type="GDScript" id="GDScript_tuphj"]
script/source = "
extends Car

@onready var camera = $Camera

@onready var ray_cast = preload('res://source/attack/ray_cast.tscn')
@onready var electric_field = preload('res://source/attack/electric_field.tscn')

var ray_cast_attack
var electric_field_attack

func _ready():
	camera.rotation = 90
	camera.set_as_top_level(true)
	# gun.rotation = 44
	
	
	
func physics_process(delta):
	camera.global_position = global_position
	camera.rotation = lerp_angle(camera.rotation, rotation + deg_to_rad(90), 0.1)
	
	#var mouse_pos = get_local_mouse_position()
	#var camera_offset = (mouse_pos - global_position) / Vector2(1920.0/2.0, 1080.0/2.0)
	#camera.offset = camera_offset
	
	if Global.player_dict['ray_cast_level'] == 0:
		pass
	if Global.player_dict['ray_cast_level'] > 0:
		if Input.is_action_just_pressed('mouse_left'):
			if $RayCast != null:
				pass
			else:
				ray_cast_attack = ray_cast.instantiate()
				ray_cast_attack.target = get_local_mouse_position()
				ray_cast_attack.level = Global.player_dict['ray_cast_level']
				ray_cast_attack.name = 'RayCast'
				# ray_cast_attack.position = body.position
				# ray_cast_attack.rotation = get_local_mouse_position()
				# ray_cast_attack.look_at(get_local_mouse_position())
				add_child(ray_cast_attack)
				
	if Global.player_dict['electric_field_level'] == 0:
		pass
	if Global.player_dict['electric_field_level'] > 0:
		if $ElectricField != null:
			pass
		else:
			electric_field_attack = electric_field.instantiate()
			# electric_field_attack.target = get_local_mouse_position()
			electric_field_attack.level = Global.player_dict['electric_field_level']
			electric_field_attack.name = 'ElectricField'
			# ray_cast_attack.position = body.position
			# ray_cast_attack.rotation = get_local_mouse_position()
			# ray_cast_attack.look_at(get_local_mouse_position())
			add_child(electric_field_attack)
		
	if Input.is_action_just_released('mouse_left'):
		if $RayCast != null:
			$RayCast.switch = false
		
	if Input.is_action_pressed('mouse_left'):
		if $RayCast != null:
			ray_cast_attack.look_at(get_global_mouse_position())
	
# 自定义函数 =============================================================

func control():
	
	if Input.is_action_pressed('ui_left'):
		if Global.player_dict['movement_lock'] == false:
			current_steering_angle = lerp_angle(current_steering_angle, deg_to_rad(-max_steering_angle), steering_speed)
	elif Input.is_action_pressed('ui_right'):
		if Global.player_dict['movement_lock'] == false:
			current_steering_angle = lerp_angle(current_steering_angle, deg_to_rad(max_steering_angle), steering_speed)
	else:
		current_steering_angle = lerp_angle(current_steering_angle, 0, 0.1)
	
	var target_acc = Vector2()
	if Input.is_action_pressed('ui_up'):
		current_acc = lerpf(current_acc, max_acc, 0.05) # 切换档位
		target_acc = transform.x * current_acc
		
	elif Input.is_action_pressed('ui_down'):
		if Global.player_dict['movement_lock'] == false:
			target_acc = transform.x * reverse_acc
			current_acc = 0 # 如果我在刹车，发动机会关闭
	else:
		current_acc = lerpf(current_acc, 0, 0.001) # 如果我释放了加速键，发动机会减速但不会立即停止
	acc = target_acc



# 信号 ================================================================
	

		






"

[sub_resource type="GDScript" id="GDScript_j35w5"]
script/source = "
extends Camera2D

@export var noise : FastNoiseLite = FastNoiseLite.new()
@export var trauma : float = 0.0
@export var max_X : int = 150
@export var max_Y : int = 150
@export var max_R : int = 25
@export var time_scale : int = 150
@export var decay : float = 0.6

var time : float = 0

func _ready():
	pass

func add_trauma(trauma_in):
	trauma = clamp(trauma + trauma_in, 0.0, 1.0)

func _process(delta):
	time += delta
	var shake = pow(trauma, 2)
	var offset_x = noise.get_noise_3d(time * time_scale, 0, 0) * max_X * shake
	var offset_y = noise.get_noise_3d(0, time * time_scale, 0) * max_Y * shake
	var rotation_degrees = noise.get_noise_3d(0, 0, time * time_scale) * max_R * shake

	if trauma > 0:
		trauma = clamp(trauma - (delta * decay), 0.0, 1.0)
"

[node name="CarPlayer" groups=["player"] instance=ExtResource("1_ldj6h")]
collision_layer = 7
collision_mask = 7
script = SubResource("GDScript_tuphj")

[node name="Camera" type="Camera2D" parent="." index="0"]
scale = Vector2(0.5, 0.5)
ignore_rotation = false
position_smoothing_speed = 3.0
rotation_smoothing_speed = 3.0
script = SubResource("GDScript_j35w5")

[node name="Sprite" parent="." index="2"]
scale = Vector2(6, 6)
texture = ExtResource("2_mhcvl")

[node name="TrailPos1" parent="." index="3"]
position = Vector2(-33, -12)

[node name="TrailPos2" parent="." index="4"]
position = Vector2(30, -12)

[node name="TrailPos3" parent="." index="5"]
position = Vector2(-33, 12)

[node name="TrailPos4" parent="." index="6"]
position = Vector2(30, 12)
